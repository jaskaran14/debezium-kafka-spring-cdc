# Spring Datasource
# This configures the application to connect to the PostgreSQL container defined in docker-compose.yml
spring.datasource.url=jdbc:postgresql://localhost:5432/mydatabase
spring.datasource.username=myuser
spring.datasource.password=mypassword
spring.jpa.hibernate.ddl-auto=update

# Kafka Broker connection
# This should point to the advertised listener you exposed to the host machine in docker-compose.yml
spring.kafka.bootstrap-servers=localhost:9092

# Kafka Consumer Properties
spring.kafka.consumer.group-id=event-consumer-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Performance Tuning: Enable batch listening and concurrency
# spring.kafka.listener.type=batch
# The number of consumer threads to run. This should not exceed the number of partitions in the topic.
# spring.kafka.listener.concurrency=3
# The maximum number of records to fetch in a single poll. Tune this based on message size and processing time.
# spring.kafka.consumer.max-poll-records=500

# This tells Spring Boot to initialize all beans lazily.
spring.main.lazy-initialization=true
